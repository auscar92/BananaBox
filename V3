/*---------------------------------------------------------------------------------------------------------------------------------------------------
Include Section for Humidity sensor. From file esp8266_dht*/


// Example testing sketch for various DHT humidity/temperature sensors
// Written by ladyada, public domain

// REQUIRES the following Arduino libraries:
// - DHT Sensor Library: https://github.com/adafruit/DHT-sensor-library
// - Adafruit Unified Sensor Lib: https://github.com/adafruit/Adafruit_Sensor

#include "DHT.h"

#define DHTPIN 4      // Digital pin connected to the DHT sensor
// Feather HUZZAH ESP8266 note: use pins 3, 4, 5, 12, 13 or 14 --
// Pin 15 can work but DHT must be disconnected during program upload.

// Uncomment whatever type you're using!
#define DHTTYPE DHT11   // DHT 11
#include <Servo.h>
//#define DHTTYPE DHT22   // DHT 22  (AM2302), AM2321
//#define DHTTYPE DHT21   // DHT 21 (AM2301)

// Connect pin 1 (on the left) of the sensor to +5V
// NOTE: If using a board with 3.3V logic like an Arduino Due connect pin 1
// to 3.3V instead of 5V!
// Connect pin 2 of the sensor to whatever your DHTPIN is
// Connect pin 4 (on the right) of the sensor to GROUND
// Connect a 10K resistor from pin 2 (data) to pin 1 (power) of the sensor

// Initialize DHT sensor.
// Note that older versions of this library took an optional third parameter to
// tweak the timings for faster processors.  This parameter is no longer needed
// as the current DHT reading algorithm adjusts itself to work on faster procs.
DHT dht(DHTPIN, DHTTYPE);
//-------------------------------------------------------------------------------------------------------------------------------------------------------
// Code for BLYNK
#define BLYNK_PRINT Serial
 

#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>


// You should get Auth Token in the Blynk App.
// Go to the Project Settings (nut icon).
char auth[] = "rs6eDbSZODyWwekNPAmanFVq1bi8OIck";

// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "Rexburg Housing";    // wifi name
char pass[] = "onmyhonor"; // wifi password


int pushButton = 13;    // Variable for pin 13 to read info
int relay = 12; 
int buttonState = 0 ;    // The pin getting information from blynk app
//int led = Blynk.virtualWrite(V1);
/*----------------------------------------------------------------------------------------------------------------------------------------------------
*/ 

Servo myservo;  // create servo object to control a servo
Servo otherServo; // Other servo object
// twelve servo objects can be created on most boards

int pos = 0;    // variable to store the servo position
int leftPos = 90; // This position is straight up
int c = 0;
//------------Relay--------------------------------------------------------------------
void relayFunction(int r)
{
  Serial.println("Function Relay called\n");
  if(r == 1)
  {
    digitalWrite(relay, HIGH);
    Serial.println("Fridge is turned up");
  }
  else
  {
    digitalWrite(relay, LOW);
  }
}


//----------- Right Servo -------------------------------------------------------------
void rightServo(int x)
{
  Serial.println("Function x called\n");
  if(pos == 0 && x == 1)
  {
    for (pos = 0; pos <= 90; pos += 1)  
    { 
    // in steps of 1 degree
    myservo.write(pos);              // tell servo to go to position in variable 'pos'
    delay(15);                       // waits 15ms for the servo to reach the position
    
    }
  }
  if(x == 0)
    {
      pos = 0;
      myservo.write(pos);
    
    }
}  

//-------------Left Servo------------------------------------------------------------
void leftServo(int y)
{
  Serial.println("Current Left servo state\n");
  Serial.println(leftPos);
  //delay(5000);
  {
  if(leftPos == 90 && y == 1) // uses negative logic
  {
    /*for (leftPos = 90; leftPos >= 20; leftPos -= 1)  
    { 
      Serial.println("Left Servo current position\n");
      Serial.println(leftPos);
      delay(2000);*/
    // in steps of 1 degree
    leftPos = 45;
    otherServo.write(leftPos);             // tell servo to go to position in variable 'pos'
    delay(15);                         // waits 15ms for the servo to reach the position
    
    //}
  }
  if(y == 0)                  // This is the position of it closed
    {
      leftPos = 90;
      otherServo.write(leftPos);
      //break;                        // Breaks the for loop
    }
}
}


//-------------DHT Sensor----------------------------------------------------------
void dhtSensor()
{
  
  int limit = 0;
  //Serial.println("Sensor called\n");
  //----DHT CODE----
  // Wait a few seconds between measurements.
  

  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
  
  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
  // Read temperature as Fahrenheit (isFahrenheit = true)
  float f = dht.readTemperature(true);

  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t) || isnan(f)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    
    return;
  }
  int ff = f;
  int condition = 54;
  // Turn on relay if temp reaches a certain point--------------------------------------------------------------------
  //pinMode(D1, OUTPUT);
  /*digitalWrite(D1, HIGH);
  delay(2000);
  digitalWrite(D1, LOW);
  delay(2000);*/
  //digitalWrite(D1, LOW);
  //delay(2000);
  //if (ff <= condition )
  //{
    //digitalWrite(D1, LOW);
    //Serial.print("\nturn off\n");
    //delay(120000); // 2 min delay
  //}
  //else 
  //{
    //digitalWrite(D1 , HIGH); // When the temp goes above 54, the fan turns on 
   // delay(2000);
    //Serial.print("\nturn on\n");
    //delay(120000); // 2 min delay
  //} 
  /*
  This is the info for I2C for ethylene and esp
  
  The default pins are defined in variants/nodemcu/pins_arduino.h as SDA=4 and SCL=5, but those are not pins number but GPIO number, so since the pins are D1=5 and D2=4.
Anyway, you can also choose the pins yourself using the I2C constructor Wire.begin(int sda, int scl);

  */
  
  
  
  //-----------------------------------------------------------------------------------------------------------------------
  // Compute heat index in Fahrenheit (the default)
  float hif = dht.computeHeatIndex(f, h);
  // Compute heat index in Celsius (isFahreheit = false)
  float hic = dht.computeHeatIndex(t, h, false);

  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.print(F("째C "));
  Serial.print(f);
  Serial.print(F("째F  Heat index: "));
  Serial.print(hic);
  Serial.print(F("째C "));
  Serial.print(hif);
  Serial.println(F("째F"));
  
  delay(5000);
}
void setup() 
{
  //----Servo Code-----
  myservo.attach(5);  // attaches the servo on pin 5 to the servo object
  otherServo.attach(0); // attaches the servo on pin 0 to the servo object
  
  //---- DHT CODE------
  Serial.begin(9600);
  Serial.println(F("DHTxx test!"));

  dht.begin();
  //----- blynk----------
  // Debug console
  //Serial.begin(9600);

  Blynk.begin(auth, ssid, pass);
  // You can also specify server:
  //Blynk.begin(auth, ssid, pass, "blynk-cloud.com", 80);
  //Blynk.begin(auth, ssid, pass, IPAddress(192,168,1,100), 8080);
  pinMode(pushButton, INPUT); // reads input values of that pin
  
  //-------Relay----------------
  pinMode(relay, OUTPUT);
  
}

void loop() 
{
//------------BLYNK------------------------------------------------------
  Blynk.run();
  
  if(c == 0)
  {
    
    Serial.println("\nVerify signal is zero");
    for(int z = 5; z > 0; z--)
    {
      Serial.println(z);
      delay(1000);
    }
    c = 1;
  }
  
  buttonState = digitalRead(pushButton);    // Uses Negative Logic
  delay(1000);
  Serial.println("\nthe current call is ");
  Serial.println(buttonState);
  Serial.println("\n");
//----------Servo loop--------------------------------------------------
  rightServo(buttonState);      // Gpio pin 5
  leftServo(buttonState);       // Gpio pin 0. You facing the same same as the fridge opening, not looking directly into fridge. 
  
//------------Serial.print("yoo\n");-----------------------------------
  
  relayFunction(buttonState);
  dhtSensor();

  
}
